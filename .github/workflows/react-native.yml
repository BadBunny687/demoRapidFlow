name: Build React Native Expo App

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Ensure Expo project exists
        run: |
          if [ ! -f "package.json" ]; then
            echo "‚ö†Ô∏è No package.json found, creating a new Expo app..."
            npx create-expo-app@latest . --yes
          else
            echo "‚úÖ Found package.json, using existing project."
          fi

      - name: Install dependencies and fix packages
        run: |
          # Install global dependencies
          npm install -g expo-cli @expo/ngrok
          
          # Install project dependencies
          npm install
          
          # Fix any version mismatches (only if package.json exists with expo)
          if [ -f "package.json" ] && grep -q '"expo"' package.json; then
            echo "Fixing Expo package versions..."
            npx expo install --fix || npx expo doctor --fix-dependencies || true
          fi

      - name: Start Expo app with tunnel
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          CI: 1
        run: |
          set -o pipefail

          # Ensure ngrok is available
          which ngrok || npm install -g @expo/ngrok

          # Start the tunnel in the background and capture output
          npx expo start --tunnel --non-interactive > expo_output.txt 2>&1 &
          EXPO_PID=$!

          # Monitor the output file for the tunnel URL
          echo "Waiting for Expo tunnel to be ready..."
          COUNTER=0
          MAX_ATTEMPTS=30
          
          while [ $COUNTER -lt $MAX_ATTEMPTS ]; do
            sleep 5
            COUNTER=$((COUNTER+1))
            
            # Check if process is still running
            if ! ps -p $EXPO_PID > /dev/null; then
              echo "Expo process stopped unexpectedly"
              cat expo_output.txt
              exit 1
            fi
            
            # Look for tunnel URL patterns
            if grep -q "Tunnel ready" expo_output.txt; then
              echo "‚úÖ Tunnel is ready!"
              break
            fi
            
            echo "Attempt $COUNTER/$MAX_ATTEMPTS - Waiting for tunnel..."
          done

          # Give it a bit more time to fully output the URL
          sleep 10

          echo "---- EXPO OUTPUT (full) ----"
          cat expo_output.txt || true
          echo "---- END EXPO OUTPUT ----"

          # Extract URLs with multiple patterns
          URL=""
          
          # Try to find exp:// URL (most common for tunnels)
          URL=$(grep -Eo 'exp://[a-zA-Z0-9.-]+:[0-9]+' expo_output.txt | head -n1 || true)
          
          # If no exp:// URL, try expo.dev URL
          if [ -z "$URL" ]; then
            URL=$(grep -Eo 'https://[a-zA-Z0-9.-]*expo.dev[^[:space:]]*' expo_output.txt | head -n1 || true)
          fi
          
          # Try to find the tunnel URL specifically
          if [ -z "$URL" ]; then
            URL=$(grep -i "tunnel.*exp://" expo_output.txt | grep -Eo 'exp://[^[:space:]]+' | head -n1 || true)
          fi
          
          # Look for QR code URL
          if [ -z "$URL" ]; then
            URL=$(grep -A2 -B2 "QR code" expo_output.txt | grep -Eo 'exp://[^[:space:]]+' | head -n1 || true)
          fi

          # Create JSON output
          if [ -z "$URL" ]; then
            echo '{"url":null,"status":"no_url_found"}' > expo_output.json
            echo "‚ö†Ô∏è No Expo URL found in output"
            
            # Try to get more diagnostic info
            echo "---- Checking for common issues ----"
            grep -i "error|warn|fail" expo_output.txt || true
          else
            printf '{"url":"%s","status":"success"}' "$URL" > expo_output.json
            echo "‚úÖ Found Expo URL: $URL"
            echo "EXPO_URL=$URL" >> $GITHUB_ENV
          fi

          # Kill the Expo process gracefully
          kill $EXPO_PID 2>/dev/null || true

      - name: Display results
        run: |
          echo "=== Expo Output JSON ==="
          cat expo_output.json
          echo ""
          if [ ! -z "$EXPO_URL" ]; then
            echo "üéâ Success! Your Expo app is accessible at: $EXPO_URL"
          else
            echo "‚ö†Ô∏è Could not extract Expo URL. Check the logs above."
          fi

      - name: Upload Expo output artifacts
        uses: actions/upload-artifact@v4
        with:
          name: expo-output
          path: |
            expo_output.json
            expo_output.txt
